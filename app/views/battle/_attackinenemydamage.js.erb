var myattri;
var eneattri;
var myclass;
var eneclass;
var commandposition;
var npplus;
var starplus;
var overkill=0;//overkillフラグ
var damage;
var attack=1;
var commandn;
var extraattack = 0;
var extradamage = 0;
var currentenemy;
var coco;


//ターゲットとされている敵のHPへのリンク
var targetenemy = 'enemyhp'+enemytext;

//iは現在のターンのダメージの合計.クリティカルの場合、iの値が倍になる
$("#cri1").html("")
$("#cri2").html("")
$("#cri3").html("")
  if(realcritical[0] == 1){
    $("#cri1").html("クリティカル1")
  }
  if(realcritical[1] == 1){
    $("#cri2").html("クリティカル2")
  }
  if(realcritical[2] == 1){
    $("#cri3").html("クリティカル3")
  }


for(attack=1;attack<4;attack++){
  currentenemy = enemytext;
  //jは今までの累積ダメージ
j = $('#id1').data('enemyhp'+enemytext);

commandn = eval("commandno"+attack);
myclass = parseInt(eval("commandclass"+attack));//クラス補正
eneclass = parseInt(eval("enemyclass"+enemytext));//クラス相性補正
myattri = parseInt(eval("commandattri"+attack));//属性相性補正
eneattri = parseInt(eval("enemyattri"+enemytext));//属性相性補正
commandposition = attack;//コマンドカード補正

<%= render :partial => "classfunc" %>//classrate
<%= render :partial => "attrifunc" %>//attrirate
<%= render :partial => "myclassfunc" %>//myrate
<%= render :partial => "commandfunc" %>//commandrate,commandnp,commandtype,afterattack
//alert(classrate+"/"+attrirate+"/"+myrate+"/"+commandrate+"/"+commandnp+"/"+commandtype)
//commandatkは単純なATK値
if(classrate == 2){
  coco = "red"
}else if(classrate == 0.5){
  coco = "blue"
}else if(classrate == 1){
  coco = "black"
}
if(attack == 1){
  commandcolor1 = coco;
}else if(attack == 2){
  commandcolor2 = coco;
}else{
  commandcolor3 = coco;
}


damage = eval("commandatk"+attack)*afterattack*commandrate*attrirate*classrate*myrate;//ダメージ
if(commandtype == 4){//宝具の場合
  $('#id1').data('np'+commandn,0);//累計NP更新
  $('#np'+commandn).html(0);//xx/100の部分を更新
  $('.servantnpbar'+commandn).val(0);//NPバーを更新
  damage = damage*parseFloat(eval("noblerate"+text[commandposition-1].slice(-2,-1))*0.01);
}
if(commandnp == 14){
  npplus = 0;
}else{
  npplus = eval("npget"+commandn+"["+commandnp+"]");//NP獲得量
}
starplus = starrate+eval("star"+commandn);//スター発生率
if(realcritical[attack-1] == 1){//クリティカルなら
  damage = damage*2
}

if(parseInt(eval("enemyhp"+enemytext))-parseInt(j)-parseInt(damage) <= 0){//死亡したら

  $('#id1').data("enemyhp"+enemytext,eval("enemyhp"+enemytext));//最大HPと同じダメージが入ったと更新
  $('#enemyhp'+enemytext).html(0)//表示HPを0に
  $('.enemyhpbar'+enemytext).val(0);//HPバーを更新

  $('.e'+enemytext).attr('name','dead');
  $('.e'+enemytext).attr('disabled',true);
  $('#e'+enemytext).text("Dead");

  //Overkill処理
  overkill = 1;
  if(text[attack-1].slice(-1) == "A"){//Artsで殺した場合
    for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){//Overkill扱いになるHit数(Hit数-i)を計算
      if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+enemytext))-parseInt(j)){
        break;
      }
    }
    npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
  }else if(text[attack-1].slice(-1) == "Q"){//Quickで殺した場合
    for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){
      if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+enemytext))-parseInt(j)){
        break;
      }
    }
    npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
  }else if(text[attack-1].slice(-1) == "B"){//Busterで殺した場合
    for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){
      if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+enemytext))-parseInt(j)){
        break;
      }
    }
    npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
  }
  //次の敵にターゲットを移す処理
  if(eval("commandno"+attack) != eval("commandno"+eval(attack+1)) || commandtype == 4){
    enemydamage1 = $('#id1').data('enemyhp1');
    enemydamage2 = $('#id1').data('enemyhp2');
    if(parseInt(enemyhp1)-enemydamage1 >= 0){//エネミー１が生きていたら
      enemytext = 1;
    }else if(parseInt(enemyhp2)-enemydamage2 >= 0){//エネミー２が生きていたら
      enemytext = 2;
    }else{
      enemytext = 3;
    }
  }

}else {//死亡しなかったら
  $('#id1').data('enemyhp'+enemytext,parseInt(j)+parseInt(damage));//累計ダメージ更新
  $('#enemyhp'+enemytext).html(parseInt(eval("enemyhp"+enemytext))-j-damage);//
  $('.enemyhpbar'+enemytext).val(parseInt(eval("enemyhp"+enemytext))-j-damage);//HPバーを更新
}

//クリティカル処理
if(realcritical[attack-1] == 1){
  npplus = npplus*2;
  starplus = starplus+20;
}
//NP獲得処理
var tmpnp = $('#id1').data('np'+commandn);//今まで獲得していたNP
$('#id1').data('np'+commandn,parseFloat(npplus)+parseFloat(tmpnp));//累計NP更新
$('#np'+commandn).html(parseFloat(tmpnp)+parseFloat(npplus));//xx/100の部分を更新
$('.servantnpbar'+commandn).val(parseFloat(tmpnp)+parseFloat(npplus));//NPバーを更新
//スター獲得処理
//iの数だけ発生率が上がる
if(overkill == 1 && eval("hit"+commandn+"["+commandtype+"]")-i > 0){//iがHit数よりも小さかったら(１撃でもOverkillが入ったら)
  starplus = starplus+30;
  if(starplus<100){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus){
        star = star+1;
      }
    }
  }else if(starplus<200){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      star=star+1;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-100){
        star = star+1;
      }
    }
  }else if(starplus<300){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      star=star+2;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-200){
        star = star+1;
      }
    }
  }else {
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      star=star+3;
    }
  }
  starplus = starplus-30;//Overkillになっていない攻撃分のスター計算　
  if(starplus<100){
    for(ik=0;ik<i;ik++){
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus){
        star = star+1;
      }
    }
  }else if(starplus<200){
    for(ik=0;ik<i;ik++){
      star=star+1;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-100){
        star = star+1;
      }
    }
  }else if(starplus<300){
    for(ik=0;ik<i;ik++){
      star=star+2;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-200){
        star = star+1;
      }
    }
  }else {
    for(ik=0;ik<i;ik++){
      star=star+3;
    }
  }
}else{//Overkillがない場合
  if(starplus<100){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus){
        star = star+1;
      }
    }
  }else if(starplus<200){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      star=star+1;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-100){
        star = star+1;
      }
    }
  }else if(starplus<300){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      star=star+2;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-200){
        star = star+1;
      }
    }
  }else {
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      star=star+3;
    }
  }
}
overkill = 0;
if(attack == 1){
  damagetoenemy1 = damage;
}else if(attack == 2){
  damagetoenemy2 = damage;
}else{
  damagetoenemy3 = damage;
}



//全体宝具の場合
if(text[attack-1].slice(0,text[attack-1].length-2) == "noble" && eval("noble"+attack+"[0]")  == 2){
  currentenemy = currentenemy%3+1;
  //jは今までの累積ダメージ
  j = $('#id1').data('enemyhp'+currentenemy);
if(parseInt(eval("enemyhp"+currentenemy))-parseInt(j) <= 0){//死んでいた場合
  currentenemy = currentenemy%3+1;
}else{

commandn = eval("commandno"+attack);
myclass = parseInt(eval("commandclass"+attack));//クラス補正
eneclass = parseInt(eval("enemyclass"+currentenemy));//クラス相性補正
myattri = parseInt(eval("commandattri"+attack));//属性相性補正
eneattri = parseInt(eval("enemyattri"+currentenemy));//属性相性補正
commandposition = attack;//コマンドカード補正

<%= render :partial => "classfunc" %>//classrate
<%= render :partial => "attrifunc" %>//attrirate
<%= render :partial => "myclassfunc" %>//myrate
<%= render :partial => "commandfunc" %>//commandrate,commandnp,commandtype,afterattack
//alert(classrate+"/"+attrirate+"/"+myrate+"/"+commandrate+"/"+commandnp+"/"+commandtype)
//commandatkは単純なATK値
damage = eval("commandatk"+attack)*afterattack*commandrate*attrirate*classrate*myrate;//ダメージ
if(commandtype == 4){//宝具の場合
  damage = damage*parseFloat(eval("noblerate"+text[commandposition-1].slice(-2,-1))*0.01);
}
if(commandnp == 14){
  npplus = 0;
}else{
  npplus = eval("npget"+commandn+"["+commandnp+"]");//NP獲得量
}
starplus = starrate+eval("star"+commandn);//スター発生率
if(realcritical[attack-1] == 1){//クリティカルなら
  damage = damage*2
}

if(parseInt(eval("enemyhp"+currentenemy))-parseInt(j)-parseInt(damage) <= 0){//死亡したら

  $('#id1').data("enemyhp"+currentenemy,eval("enemyhp"+currentenemy));//最大HPと同じダメージが入ったと更新
  $('#enemyhp'+currentenemy).html(0)//表示HPを0に
  $('.enemyhpbar'+currentenemy).val(0);//HPバーを更新

  $('.e'+currentenemy).attr('name','dead');
  $('.e'+currentenemy).attr('disabled',true);
  $('#e'+currentenemy).text("Dead");

  //Overkill処理
  overkill = 1;
  if(text[attack-1].slice(-1) == "A"){//Artsで殺した場合
    for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){//Overkill扱いになるHit数(Hit数-i)を計算
      if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+currentenemy))-parseInt(j)){
        break;
      }
    }
    npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
  }else if(text[attack-1].slice(-1) == "Q"){//Quickで殺した場合
    for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){
      if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+currentenemy))-parseInt(j)){
        break;
      }
    }
    npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
  }else if(text[attack-1].slice(-1) == "B"){//Busterで殺した場合
    for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){
      if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+currentenemy))-parseInt(j)){
        break;
      }
    }
    npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
  }

}else {//死亡しなかったら
  $('#id1').data('enemyhp'+currentenemy,parseInt(j)+parseInt(damage));//累計ダメージ更新
  $('#enemyhp'+currentenemy).html(parseInt(eval("enemyhp"+currentenemy))-j-damage);//
  $('.enemyhpbar'+currentenemy).val(parseInt(eval("enemyhp"+currentenemy))-j-damage);//HPバーを更新
}

//NP獲得処理
var tmpnp = $('#id1').data('np'+commandn);//今まで獲得していたNP
$('#id1').data('np'+commandn,parseFloat(npplus)+parseFloat(tmpnp));//累計NP更新
$('#np'+commandn).html(parseFloat(tmpnp)+parseFloat(npplus));//xx/100の部分を更新
$('.servantnpbar'+commandn).val(parseFloat(tmpnp)+parseFloat(npplus));//NPバーを更新
//スター獲得処理
//iの数だけ発生率が上がる
if(overkill == 1 && eval("hit"+commandn+"["+commandtype+"]")-i > 0){//iがHit数よりも小さかったら(１撃でもOverkillが入ったら)
  starplus = starplus+30;
  if(starplus<100){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus){
        star = star+1;
      }
    }
  }else if(starplus<200){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      star=star+1;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-100){
        star = star+1;
      }
    }
  }else if(starplus<300){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      star=star+2;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-200){
        star = star+1;
      }
    }
  }else {
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
      star=star+3;
    }
  }
  starplus = starplus-30;//Overkillになっていない攻撃分のスター計算　
  if(starplus<100){
    for(ik=0;ik<i;ik++){
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus){
        star = star+1;
      }
    }
  }else if(starplus<200){
    for(ik=0;ik<i;ik++){
      star=star+1;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-100){
        star = star+1;
      }
    }
  }else if(starplus<300){
    for(ik=0;ik<i;ik++){
      star=star+2;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-200){
        star = star+1;
      }
    }
  }else {
    for(ik=0;ik<i;ik++){
      star=star+3;
    }
  }
}else{//Overkillがない場合
  if(starplus<100){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus){
        star = star+1;
      }
    }
  }else if(starplus<200){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      star=star+1;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-100){
        star = star+1;
      }
    }
  }else if(starplus<300){
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      star=star+2;
      var rand=Math.floor(Math.random() * 100);
      if(rand<starplus-200){
        star = star+1;
      }
    }
  }else {
    for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
      star=star+3;
    }
  }
}
overkill = 0;



//3対目


currentenemy = currentenemy%3+1;
}


//jは今までの累積ダメージ
j = $('#id1').data('enemyhp'+currentenemy);
if(parseInt(eval("enemyhp"+currentenemy))-parseInt(j) <= 0){//死んでいた場合

}else{
commandn = eval("commandno"+attack);
myclass = parseInt(eval("commandclass"+attack));//クラス補正
eneclass = parseInt(eval("enemyclass"+currentenemy));//クラス相性補正
myattri = parseInt(eval("commandattri"+attack));//属性相性補正
eneattri = parseInt(eval("enemyattri"+currentenemy));//属性相性補正
commandposition = attack;//コマンドカード補正

<%= render :partial => "classfunc" %>//classrate
<%= render :partial => "attrifunc" %>//attrirate
<%= render :partial => "myclassfunc" %>//myrate
<%= render :partial => "commandfunc" %>//commandrate,commandnp,commandtype,afterattack
//alert(classrate+"/"+attrirate+"/"+myrate+"/"+commandrate+"/"+commandnp+"/"+commandtype)
//commandatkは単純なATK値
damage = eval("commandatk"+attack)*afterattack*commandrate*attrirate*classrate*myrate;//ダメージ
if(commandtype == 4){//宝具の場合
damage = damage*parseFloat(eval("noblerate"+text[commandposition-1].slice(-2,-1))*0.01);
}
if(commandnp == 14){
npplus = 0;
}else{
npplus = eval("npget"+commandn+"["+commandnp+"]");//NP獲得量
}
starplus = starrate+eval("star"+commandn);//スター発生率
if(realcritical[attack-1] == 1){//クリティカルなら
damage = damage*2
}

if(parseInt(eval("enemyhp"+currentenemy))-parseInt(j)-parseInt(damage) <= 0){//死亡したら

$('#id1').data("enemyhp"+currentenemy,eval("enemyhp"+currentenemy));//最大HPと同じダメージが入ったと更新
$('#enemyhp'+currentenemy).html(0)//表示HPを0に
$('.enemyhpbar'+currentenemy).val(0);//HPバーを更新

$('.e'+currentenemy).attr('name','dead');
$('.e'+currentenemy).attr('disabled',true);
$('#e'+currentenemy).text("Dead");

//Overkill処理
overkill = 1;
if(text[attack-1].slice(-1) == "A"){//Artsで殺した場合
  for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){//Overkill扱いになるHit数(Hit数-i)を計算
    if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+currentenemy))-parseInt(j)){
      break;
    }
  }
  npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
}else if(text[attack-1].slice(-1) == "Q"){//Quickで殺した場合
  for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){
    if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+currentenemy))-parseInt(j)){
      break;
    }
  }
  npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
}else if(text[attack-1].slice(-1) == "B"){//Busterで殺した場合
  for(i=0;eval("hit"+commandn+"["+commandtype+"]")>=i;i++){
    if(damage*i/eval("hit"+commandn+"["+commandtype+"]") > parseInt(eval("enemyhp"+currentenemy))-parseInt(j)){
      break;
    }
  }
  npplus = parseFloat(npplus)+parseFloat(npplus*0.5*(parseInt(eval("hit"+commandn+"["+commandtype+"]"))-i)/parseInt(eval("hit"+commandn+"["+commandtype+"]")));
}

}else {//死亡しなかったら
$('#id1').data('enemyhp'+currentenemy,parseInt(j)+parseInt(damage));//累計ダメージ更新
$('#enemyhp'+currentenemy).html(parseInt(eval("enemyhp"+currentenemy))-j-damage);//
$('.enemyhpbar'+currentenemy).val(parseInt(eval("enemyhp"+currentenemy))-j-damage);//HPバーを更新
}

//NP獲得処理
var tmpnp = $('#id1').data('np'+commandn);//今まで獲得していたNP
$('#id1').data('np'+commandn,parseFloat(npplus)+parseFloat(tmpnp));//累計NP更新
$('#np'+commandn).html(parseFloat(tmpnp)+parseFloat(npplus));//xx/100の部分を更新
$('.servantnpbar'+commandn).val(parseFloat(tmpnp)+parseFloat(npplus));//NPバーを更新
//スター獲得処理
//iの数だけ発生率が上がる
if(overkill == 1 && eval("hit"+commandn+"["+commandtype+"]")-i > 0){//iがHit数よりも小さかったら(１撃でもOverkillが入ったら)
starplus = starplus+30;
if(starplus<100){
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus){
      star = star+1;
    }
  }
}else if(starplus<200){
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
    star=star+1;
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus-100){
      star = star+1;
    }
  }
}else if(starplus<300){
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
    star=star+2;
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus-200){
      star = star+1;
    }
  }
}else {
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]")-i;ik++){
    star=star+3;
  }
}
starplus = starplus-30;//Overkillになっていない攻撃分のスター計算　
if(starplus<100){
  for(ik=0;ik<i;ik++){
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus){
      star = star+1;
    }
  }
}else if(starplus<200){
  for(ik=0;ik<i;ik++){
    star=star+1;
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus-100){
      star = star+1;
    }
  }
}else if(starplus<300){
  for(ik=0;ik<i;ik++){
    star=star+2;
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus-200){
      star = star+1;
    }
  }
}else {
  for(ik=0;ik<i;ik++){
    star=star+3;
  }
}
}else{//Overkillがない場合
if(starplus<100){
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus){
      star = star+1;
    }
  }
}else if(starplus<200){
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
    star=star+1;
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus-100){
      star = star+1;
    }
  }
}else if(starplus<300){
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
    star=star+2;
    var rand=Math.floor(Math.random() * 100);
    if(rand<starplus-200){
      star = star+1;
    }
  }
}else {
  for(ik=0;ik<eval("hit"+commandn+"["+commandtype+"]");ik++){
    star=star+3;
  }
}
}
overkill = 0;
}
}













}






//Extraattack
if(commandno1 == commandno2 && commandno2 == commandno3){
  extraattack = 1;
  if(text[0].slice(-1) == text[1].slice(-1) && text[1].slice(-1) == text[2].slice(-1)){
    damage = commandatk1*afterattack*3.5*attrirate*classrate;//ダメージ
  }else {
    damage = commandatk1*afterattack*2*attrirate*classrate;//ダメージ
  }
  if(text[0].slice(-1) == "A"){
    npplus = eval("npget"+commandno1+"[11]");
  }else {
    npplus = eval("npget"+commandno1+"[10]");//NP獲得量
  }
  starplus = 100+eval("star"+commandno1);//スター発生率
  j = $('#id1').data('enemyhp'+enemytext);

  if(parseInt(eval("enemyhp"+enemytext))-parseInt(j)-parseInt(damage) <= 0){//死亡したら

    $('#id1').data("enemyhp"+enemytext,eval("enemyhp"+enemytext));//最大HPと同じダメージが入ったと更新
    $('#enemyhp'+enemytext).html(0)//表示HPを0に
    $('.enemyhpbar'+enemytext).val(0);//HPバーを更新

    $('.e'+enemytext).attr('name','dead');
    $('.e'+enemytext).attr('disabled',true);
    $('#e'+enemytext).text("Dead");

    //Overkill処理
    overkill = 1;
    for(i=0;;i++){//Overkill扱いになるHit数(Hit数-i)を計算
      if(damage*i/eval("hit"+commandno1+"[3]") > parseInt(eval("enemyhp"+enemytext))-eval("enemydamage"+enemytext)){
        break;
      }
    }
    npplus = npplus+npplus*0.5*(eval("hit"+commandno1+"[3]")-i)/eval("hit"+commandno1+"[3]");
  }else {//死亡しなかったら
    $('#id1').data('enemyhp'+enemytext,eval("enemydamage"+enemytext)+damage);//累計ダメージ更新
    $('#enemyhp'+enemytext).html(parseInt(eval("enemyhp"+enemytext))-eval("enemydamage"+enemytext)-damage);//
    $('.enemyhpbar'+enemytext).val(parseInt(eval("enemyhp"+enemytext))-eval("enemydamage"+enemytext)-damage);//HPバーを更新
  }

  //NP獲得処理
  var tmpnp = $('#id1').data('np'+commandno1);//今まで獲得していたNP
  $('#id1').data('np'+commandno1,parseFloat(npplus)+parseFloat(tmpnp));//累計NP更新
  $('#np'+commandno1).html(parseFloat(tmpnp)+parseFloat(npplus));//xx/100の部分を更新
  $('.servantnpbar'+commandno1).val(parseFloat(tmpnp)+parseFloat(npplus));//NPバーを更新
  //スター獲得処理
  //iの数だけ発生率が上がる
  if(overkill == 1 && eval("hit"+commandn+"[3]")-i >0){//iがHit数よりも小さかったら(１撃でもOverkillが入ったら)
    starplus = starplus+30;
    if(starplus<100){
      for(ik=0;ik<eval("hit"+commandno1+"[3]")-i;ik++){
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus){
          star = star+1;
        }
      }
    }else if(starplus<200){
      for(ik=0;ik<eval("hit"+commandno1+"[3]")-i;ik++){
        star=star+1;
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus-100){
          star = star+1;
        }
      }
    }else if(starplus<300){
      for(ik=0;ik<eval("hit"+commandno1+"[3]")-i;ik++){
        star=star+2;
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus-200){
          star = star+1;
        }
      }
    }else {
      for(ik=0;ik<eval("hit"+commandno1+"[3]")-i;ik++){
        star=star+3;
      }
    }
    starplus = starplus-30;//Overkillになっていない攻撃分のスター計算　
    if(starplus<100){
      for(ik=0;ik<i;ik++){
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus){
          star = star+1;
        }
      }
    }else if(starplus<200){
      for(ik=0;ik<i;ik++){
        star=star+1;
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus-100){
          star = star+1;
        }
      }
    }else if(starplus<300){
      for(ik=0;ik<i;ik++){
        star=star+2;
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus-200){
          star = star+1;
        }
      }
    }else {
      for(ik=0;ik<i;ik++){
        star=star+3;
      }
    }
  }else{//Overkillがない場合
    if(starplus<100){
      for(ik=0;ik<eval("hit"+commandno1+"[3]");ik++){
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus){
          star = star+1;
        }
      }
    }else if(starplus<200){
      for(ik=0;ik<eval("hit"+commandno1+"[3]");ik++){
        star=star+1;
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus-100){
          star = star+1;
        }
      }
    }else if(starplus<300){
      for(ik=0;ik<eval("hit"+commandno1+"[3]");ik++){
        star=star+2;
        var rand=Math.floor(Math.random() * 100);
        if(rand<starplus-200){
          star = star+1;
        }
      }
    }else {
      for(ik=0;ik<eval("hit"+commandno1+"[3]");ik++){
        star=star+3;
      }
    }
  }
  overkill = 0;
  extradamage = damage;
}




//Quickチェイン
if(text[0].slice(-1) == "Q" && text[1].slice(-1) == "Q" && text[2].slice(-1) == "Q"){
  star = star+10;
}
//Artsチェイン
if(text[0].slice(-1) == "A" && text[1].slice(-1) == "A" && text[2].slice(-1) == "A"){
  var tmpnp = $('#id1').data('np'+commandno1);
  $('#id1').data('np'+commandno1,20+parseFloat(tmpnp));//累計NP更新
  $('#np'+commandno1).html(parseFloat(tmpnp)+20);//xx/100の部分を更新
  $('.servantnpbar'+commandno1).val(parseFloat(tmpnp)+20);//NPバーを更新
  if(commandno2 != commandno1){
    tmpnp = $('#id1').data('np'+commandno2);
    $('#id1').data('np'+commandno2,20+parseFloat(tmpnp));//累計NP更新
    $('#np'+commandno2).html(parseFloat(tmpnp)+20);//xx/100の部分を更新
    $('.servantnpbar'+commandno2).val(parseFloat(tmpnp)+20);//NPバーを更新
  }
  if(commandno3 != commandno2 && commandno3 != commandno1){
    tmpnp = $('#id1').data('np'+commandno3);
    $('#id1').data('np'+commandno3,20+parseFloat(tmpnp));//累計NP更新
    $('#np'+commandno3).html(parseFloat(tmpnp)+20);//xx/100の部分を更新
    $('.servantnpbar'+commandno3).val(parseFloat(tmpnp)+20);//NPバーを更新
  }
}





if(parseInt("<%=params[:enemyhp1]%>") <= $('#id1').data('enemyhp1') && parseInt("<%=params[:enemyhp2]%>") <= $('#id1').data('enemyhp2') && parseInt("<%=params[:enemyhp3]%>") <= $('#id1').data('enemyhp3')) {
  alert("Quest Clear")
}

if(extraattack != 0){
  var getData = String($("#tips").html());
  var addData = "Turn"+turn+":"+commandname1+"の<font color='"+commandcolor1+"'>"+parseInt(damagetoenemy1)+"</font>ダメージ! "+commandname2+"の<font color='"+commandcolor2+"'>"+parseInt(damagetoenemy2)+"</font>ダメージ! "+commandname3+"の<font color='"+commandcolor3+"'>"+parseInt(damagetoenemy3)+"</font>ダメージ! EXTRAATTACKで"+parseInt(extradamage)+"ダメージ！<br>"
  $("#tips").html(getData+addData);
}else{
  var getData = String($("#tips").html());
  var addData = "Turn"+turn+":"+commandname1+"の<font color='"+commandcolor1+"'>"+parseInt(damagetoenemy1)+"</font>ダメージ! "+commandname2+"の<font color='"+commandcolor2+"'>"+parseInt(damagetoenemy2)+"</font>ダメージ! "+commandname3+"の<font color='"+commandcolor3+"'>"+parseInt(damagetoenemy3)+"</font>ダメージ!<br>"
  $("#tips").html(getData+addData);
}
